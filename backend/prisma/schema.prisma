// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedProjects       Project[]            @relation("OwnerProjects")
  projectParticipants ProjectParticipant[]
  assignedTasks       Task[]               @relation("AssignedTasks")

  @@map("users")
}

model Project {
  id           String               @id @default(cuid())
  name         String
  description  String?
  ownerId      Int
  owner        User                 @relation("OwnerProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  participants ProjectParticipant[]
  columns      Column[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("projects")
}

enum ParticipantRole {
  OWNER
  MEMBER
}

model ProjectParticipant {
  id        String          @id @default(cuid())
  userId    Int
  projectId String
  role      ParticipantRole @default(MEMBER)
  joinedAt  DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_participants")
}

model Column {
  id        String   @id @default(cuid())
  title     String
  order     Int
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  columnId    String
  assigneeId  Int?
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee    User?    @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}